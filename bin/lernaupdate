#!/usr/bin/env node

const meow = require("meow");
const chalk = require("chalk");

const { input, flags } = meow(
  `
  Usage: lernaupdate [--flag value] [ProjectDirectory]

  Options:
    --dedupe, -d          List only dependencies that have a version conflict between one or more packages

    --dependency, --dep   Specifiy dependency to update/add (Skips interactive step)

    --new-installs-mode   Specifiy install mode for first-time dependencies: "prod", "dev" or "peer".
                          Required when adding a dependency to a package that does not already have it installed.
                          (Skips interactive step)

    --packages            Specifiy packages (comma-separated Glob-patterns) in which to update/add dependency (Skips interactive step)

    --non-interactive     Prevent any interactive prompts (Requires --dependency flag to be specified)

    --lazy                Runs a single install command after updating package.json files, instead installing inside each individual package (Useful for workspaces)

    --install-args        Any additional arguments to pass to the NPM or Yarn during the installation (space-separated). See example.

  Examples:
    $ lernaupdate ./myproject --dedupe

    $ lernaupdate ./myproject --dependency "lodash@latest"
    $ lernaupdate ./myproject --dependency "react@^1.6.1"

    $ lernaupdate ./myproject --packages "packages/components,packages/utils,packages/dev-server"
    $ lernaupdate ./myproject --packages "packages/test-*,packages/fixtures"
    $ lernaupdate ./myproject --packages "packages/*"

    $ lernaupdate ./myproject --non-interactive --dependency "react@latest" --new-installs-mode dev

    $ lernaupdate ./myproject --install-args="--verbose --prefer-offline"
`,
  {
    flags: {
      dedupe: {
        type: "boolean",
        alias: "d",
      },
      dependency: {
        type: "string",
      },
      packages: {
        type: "string",
      },
      nonInteractive: {
        type: "boolean",
      },
      newIntallsMode: {
        type: "string",
      },
      lazy: {
        type: "boolean",
      },
      installArgs: {
        type: "string",
      },
    },
  }
);

require("../src/index.js")({ input, flags }).catch(err => {
  console.log(chalk`{red.bold An error occurred:}\n{red ${err}}`);
  process.exit(1);
});
